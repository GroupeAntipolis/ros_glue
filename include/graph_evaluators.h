//
//
//  	G.L.U.E. by M.C.G. 2015 
//
//  	Glue stands for 
// 	Genetically Led Universal Evaluator.
//
// 		Add some glue in your code... 
//
//

#ifndef __GRAPHEVAL_H__
#define __GRAPHEVAL_H__
#include "graph.h"
#include "graph_player.h"

class training_data
{
public:
	training_data();
	/// all traninig in value
	g_nbr* tvi;

	/// all training out values
	g_nbr* tvo;

	/// number of training sets held by graph_coach.
	int training_count;

	/// usage counter
	int ucounter;
};

 
/** \brief The graph_evaluator is an abstract class used in graph evaluation
*
*	
*/
extern "C" class graph_evaluator
{
	
public:

	/// we dont use any constructor for now
	///graph_evaluator(graph* pgraph);
	virtual ~graph_evaluator(){};
	/// pure virtual: abstract class
	virtual double evaluate()=0;

	/// cloning function
	/// pure virtual: abstract class
	virtual graph_evaluator* clone()=0;

	/// simple method to get the number
	/// of registered sets of traiining values
	/// pure virtual: abstract class
	virtual void add_training(g_nbr* vi,g_nbr* vo)=0;

	/// Adds a set of input training values
	/// and an output one.
	/// pure virtual: abstract class
	virtual int get_training_count()=0;

	graph* Graph;

};

/** \brief The standard_graph_evaluator is an concrete class used in graph evaluation
*
*	
*/
class standard_graph_evaluator:graph_evaluator
{

public:

	standard_graph_evaluator(graph* pgraph);
	~standard_graph_evaluator();

	double evaluate();

	/// simple method to get the number
	/// of registered sets of traiining values
	void add_training(g_nbr* vi,g_nbr* vo);

	/// Adds a set of input training values
	/// and an output one.
	int get_training_count();


	/// cloning function
	graph_evaluator* clone();


	///graph* Graph;

	training_data* Training_data;

protected:
	/// temp space to stor outs when eval
	g_nbr* outdata;

private:

	graph_player* _graph_player;

	/// this function take the data generated by a graph activation
	/// and compare it to respective training data.
	/// the partial evaluation value is returned
	g_nbr get_score(g_nbr* out_data,int train_out_index, int train_out_width);



};

#endif